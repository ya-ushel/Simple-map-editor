{"version":3,"sources":["C:/Users/Dmitriy/WebstormProjects/FirstProject/server/..\\client\\containers\\Map\\Map.js"],"names":["mapActions","Map","props","clientWidth","document","documentElement","clientHeight","state","countColumn","Math","ceil","countRows","gridArray","test","window","addEventListener","forceUpdate","setState","createGridArray","rows","column","array","i","j","initMap","width","height","updateMapSize","map","tools","blocks","mapStateToProps","mapReducer","toolsReducer","blocksReducer","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;IAAYA,U;;AACZ;;;;AACA;;;;;;;;;;;;;;IAGMC,G;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8GACTA,KADS;;AAGf,YAAIC,cAAcC,SAASC,eAAT,CAAyBF,WAA3C;AACA,YAAIG,eAAeF,SAASC,eAAT,CAAyBC,YAA5C;;AAEA,cAAKC,KAAL,GAAa;AACTC,yBAAaC,KAAKC,IAAL,CAAUP,cAAc,EAAxB,CADJ;AAETQ,uBAAWF,KAAKC,IAAL,CAAUJ,eAAe,EAAzB,CAFF;AAGTM,uBAAW,EAHF;AAITC,kBAAM;;AAJG,SAAb;AANe;AAalB;;;;4CAEmB;AAAA;;AAChBC,mBAAOC,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,uBAAM,OAAKC,WAAL,EAAN;AAAA,aAAlC;AACH;;;6CAEoB;AACjB,iBAAKC,QAAL,CAAc;AACVL,2BAAW,KAAKM,eAAL;AADD,aAAd;AAGH;;;0CAE6E;AAAA,gBAA9DC,IAA8D,uEAAvD,KAAKZ,KAAL,CAAWI,SAA4C;AAAA,gBAAjCS,MAAiC,uEAAxB,KAAKb,KAAL,CAAWC,WAAa;;AAC1E,gBAAIa,QAAQ,EAAZ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAApB,EAA0BG,GAA1B,EAA+B;AAC3BD,sBAAMC,CAAN,IAAW,EAAX;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC,CAEhC;AACJ;AAPyE,gBAQrEC,OARqE,GAQ1D,KAAKtB,KAAL,CAAWF,UAR+C,CAQrEwB,OARqE;;AAS1EA,oBAAQH,KAAR,EAAe,KAAKd,KAAL,CAAWC,WAA1B,EAAuC,KAAKD,KAAL,CAAWI,SAAlD;AACA,mBAAOU,KAAP;AACH;;;sCAGa;;AAEV,gBAAII,QAAQhB,KAAKC,IAAL,CAAUN,SAASC,eAAT,CAAyBF,WAAzB,GAAuC,EAAjD,CAAZ;AACA,gBAAIuB,SAASjB,KAAKC,IAAL,CAAUN,SAASC,eAAT,CAAyBC,YAAzB,GAAwC,EAAlD,CAAb;;AAEA,gBAAImB,UAAU,KAAKlB,KAAL,CAAWC,WAArB,IAAoCkB,WAAW,KAAKnB,KAAL,CAAWI,SAA9D,EAAyE;AACrE,qBAAKM,QAAL,CAAc;AACVT,iCAAaiB,KADH;AAEVd,+BAAWe;AAFD,iBAAd;;AADqE,oBAMhEC,aANgE,GAM/C,KAAKzB,KAAL,CAAWF,UANoC,CAMhE2B,aANgE;;AAOrEA,8BAAcF,KAAd,EAAqBC,MAArB;AACH;AACJ;;;iCAEQ;AACL,mBACI;AAAA;AAAA,kBAAK,WAAU,KAAf;AACI;AACI,yBAAK,KAAKxB,KAAL,CAAW0B,GADpB;AAEI,gCAAY,KAAK1B,KAAL,CAAWF,UAF3B;AAGI,2BAAO,KAAKE,KAAL,CAAW2B,KAHtB;AAII,4BAAQ,KAAK3B,KAAL,CAAW4B;AAJvB;AADJ,aADJ;AAUH;;;;;;AAGL,SAASC,eAAT,CAAyBxB,KAAzB,EAAgC;AAC5B,WAAO;AACHqB,aAAKrB,MAAMyB,UADR;AAEHH,eAAOtB,MAAM0B,YAFV;AAGHH,gBAAQvB,MAAM2B;AAHX,KAAP;AAKH;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,WAAO;AACHpC,oBAAY,+BAAmBA,UAAnB,EAA+BoC,QAA/B;AADT,KAAP;AAGH;;kBAGc,yBAAQL,eAAR,EAAyBI,kBAAzB,EAA6ClC,GAA7C,C","sourcesContent":["import {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as mapActions from '../../actions/mapActions';\r\nimport React, {Component} from 'react';\r\nimport Grid from './parts/Grid';\r\n\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let clientWidth = document.documentElement.clientWidth;\r\n        let clientHeight = document.documentElement.clientHeight;\r\n\r\n        this.state = {\r\n            countColumn: Math.ceil(clientWidth / 50),\r\n            countRows: Math.ceil(clientHeight / 50),\r\n            gridArray: [],\r\n            test: false,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.forceUpdate())\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n            gridArray: this.createGridArray(),\r\n        });\r\n    }\r\n\r\n    createGridArray(rows = this.state.countRows, column = this.state.countColumn) {\r\n        let array = [];\r\n        for (let i = 0; i < rows; i++) {\r\n            array[i] = [];\r\n            for (let j = 0; j < column; j++) {\r\n\r\n            }\r\n        }\r\n        let {initMap} = this.props.mapActions;\r\n        initMap(array, this.state.countColumn, this.state.countRows);\r\n        return array;\r\n    }\r\n\r\n\r\n    forceUpdate() {\r\n\r\n        let width = Math.ceil(document.documentElement.clientWidth / 50);\r\n        let height = Math.ceil(document.documentElement.clientHeight / 50);\r\n\r\n        if (width !== this.state.countColumn || height !== this.state.countRows) {\r\n            this.setState({\r\n                countColumn: width,\r\n                countRows: height,\r\n            });\r\n\r\n            let {updateMapSize} = this.props.mapActions;\r\n            updateMapSize(width, height);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"map\">\r\n                <Grid\r\n                    map={this.props.map}\r\n                    mapActions={this.props.mapActions}\r\n                    tools={this.props.tools}\r\n                    blocks={this.props.blocks}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        map: state.mapReducer,\r\n        tools: state.toolsReducer,\r\n        blocks: state.blocksReducer,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        mapActions: bindActionCreators(mapActions, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);"]}