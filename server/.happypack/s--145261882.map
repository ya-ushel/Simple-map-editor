{"version":3,"sources":["C:/Users/Dmitriy/WebstormProjects/FirstProject/server/..\\client\\containers\\Blocks\\Blocks.js"],"names":["blocksActions","toolsActions","LeftNavButton","props","onClick","RightNavButton","Blocks","initBlocks","arrayBlocks","mapping","map","key","console","log","type","num","setSelectedBlock","newArray","source","selectedItem","item","x","y","e","window","event","setState","eventType","deltaY","slider","slickNext","slickPrev","settings","draggable","initialSlide","infinite","speed","slidesToShow","slidesToScroll","className","prevArrow","nextArrow","variableWidth","sliderContent","blocks","temp","selectedBlock","push","selectBlockHandle","bind","length","wheelHandle","c","mapStateToProps","state","blocksReducer","mapReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Slider from 'react-slick';\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as blocksActions from '../../actions/blocksActions';\r\nimport * as toolsActions from '../../actions/toolsActions';\r\n\r\nclass LeftNavButton extends Component {\r\n    render() {\r\n        return <div onClick={this.props.onClick} className=\"prevArrow\"><div/></div>\r\n    }\r\n}\r\nclass RightNavButton extends Component {\r\n    render() {\r\n        return <div onClick={this.props.onClick} className=\"nextArrow\"><div src=\"/img/nextArrow.png\"/></div>\r\n    }\r\n}\r\n\r\nclass Blocks extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        const { initBlocks } = this.props.blocksActions;\r\n        let arrayBlocks = {};\r\n        let {...mapping} = this.props.map.mapping;\r\n        for(let key in mapping){\r\n            arrayBlocks[key] = mapping[key];\r\n            console.log(key.type);\r\n        }\r\n        initBlocks(arrayBlocks);\r\n    }\r\n\r\n    selectBlockHandle(num){\r\n\r\n        this.props.blocksActions.setSelectedBlock(num);\r\n\r\n        let newArray = this.props.map.source;\r\n\r\n        this.props.map.selectedItem.map( (item)=>{\r\n            newArray[item.x][item.y] = num;\r\n        });\r\n    }\r\n\r\n    wheelHandle(e = window.event){\r\n        this.setState({eventType: e.type});\r\n        if(e.deltaY > 0)\r\n            this.slider.slickNext();\r\n        else\r\n            this.slider.slickPrev();\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        const settings = {\r\n            draggable: false,\r\n            initialSlide: 0,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 8,\r\n            slidesToScroll: 3,\r\n            className: 'blocksCarousel',\r\n            prevArrow: <LeftNavButton/>,\r\n            nextArrow: <RightNavButton/>,\r\n            variableWidth: true,\r\n        };\r\n        let sliderContent = [];\r\n        const {...blocks} = this.props.blocks.blocks;\r\n        for(let item in blocks){\r\n            let temp = this.props.map.mapping[item];\r\n            if (this.props.blocks.selectedBlock === item)\r\n                temp += ' selected';\r\n\r\n            temp += ' block';\r\n\r\n            sliderContent.push(\r\n                <div\r\n                    className={temp}\r\n                    key={item}\r\n                    onClick={this.selectBlockHandle.bind(this,item)}\r\n                />);\r\n        }\r\n\r\n\r\n        if(!sliderContent.length){\r\n            sliderContent = (<div className=\"block\">Loading...</div>);\r\n        }\r\n\r\n        return(\r\n            <div className=\"blocksContainer\">\r\n                <div className=\"blocks\"\r\n                     onWheel={this.wheelHandle.bind(this,event)}\r\n                >\r\n                    <Slider ref={c => this.slider = c } {...settings}>\r\n                        {sliderContent}\r\n                    </Slider>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        blocks: state.blocksReducer,\r\n        map: state.mapReducer,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return{\r\n        blocksActions: bindActionCreators(blocksActions, dispatch),\r\n        toolsActions: bindActionCreators(toolsActions, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Blocks);"]}