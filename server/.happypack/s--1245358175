/* REACT HOT LOADER */ if (module.hot) { (function () { var ReactHotAPI = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = map;

var _Map = require('../constants/Map');

var initialState = {
    source: [],
    width: 0,
    height: 0,
    mapping: _Map.MAPPING,
    select: false,
    selectedItem: []
};

function map() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    switch (action.type) {
        case _Map.MAP_INIT:
            {
                return _extends({}, state, {
                    source: action.payload.source,
                    width: action.payload.width,
                    height: action.payload.height
                });
            }
        case _Map.CHANGED_MAP_SOURCE:
            var newSource = state.source;
            newSource[action.x][action.y] = action.elem;
            return _extends({}, state, {
                source: newSource
            });
        case _Map.UPDATE_MAP_SIZE:
            return _extends({}, state, {
                width: action.payload.newWidth,
                height: action.payload.newHeight
            });
        case _Map.SET_SELECT:
            return _extends({}, state, {
                select: action.payload
            });
        case _Map.ADD_SELECTION:
            var newSelection = state.selectedItem;
            newSelection.push({ x: action.x, y: action.y });
            return _extends({}, state, {
                selectedItem: newSelection
            });
        case _Map.RESET_SELECTIONS:
            return _extends({}, state, {
                selectedItem: action.payload
            });
        case 'CREATE_STRUCTURES':
            var newCreateSource = state.source;
            var generationWidth = action.source.length;
            var generationHeight = action.source[0].length;
            console.log(generationHeight, generationWidth);
            for (var i = action.x; i < state.height; i++) {
                for (var j = action.y; j < state.width; j++) {
                    newCreateSource[i][j] = '4';
                }
            }
            return _extends({}, state, {
                source: newCreateSource
            });
        default:
            return state;
    }
}

/* REACT HOT LOADER */ }).call(this); } finally { if (module.hot) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "mapReducer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }