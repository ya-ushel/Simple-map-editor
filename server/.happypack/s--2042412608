/* REACT HOT LOADER */ if (module.hot) { (function () { var ReactHotAPI = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cell = function (_Component) {
    _inherits(Cell, _Component);

    function Cell(props) {
        _classCallCheck(this, Cell);

        var _this = _possibleConstructorReturn(this, (Cell.__proto__ || Object.getPrototypeOf(Cell)).call(this, props));

        _this.onClick = _this.onClick.bind(_this);
        _this.onMove = _this.onMove.bind(_this);
        _this.onMoveStart = _this.onMoveStart.bind(_this);
        _this.onUnmove = _this.onUnmove.bind(_this);
        _this.onRightClick = _this.onRightClick.bind(_this);
        return _this;
    }

    _createClass(Cell, [{
        key: 'onClick',
        value: function onClick() {
            var _props = this.props,
                x = _props.x,
                y = _props.y;

            var tool = this.props.tools.currentItem;
            if (tool === 'hand') {
                this.props.mapActions.addMapSource(this.props.blocks.selectedBlock, x, y);
            }
            if (tool === 'delete') {
                this.props.mapActions.deleteMapSource(x, y);
            }
            if (tool === 'select') {
                this.props.mapActions.addSelection(x, y);
            }
            if (tool === 'create') {
                var generateObj = this.props.tools.generateObj;

                var structure = {};
                for (var obj in generateObj) {
                    if (obj.name === this.props.tools.currentGeneration) {
                        structure = obj;
                        break;
                    }
                }
                console.log(structure);
                // this.props.mapActions.createStructures(x, y);
            }
        }
    }, {
        key: 'onMove',
        value: function onMove() {
            var _props2 = this.props,
                x = _props2.x,
                y = _props2.y;

            var tool = this.props.tools.currentItem;
            if (this.props.map.select && tool === 'hand') {
                this.props.mapActions.addMapSource(this.props.blocks.selectedBlock, x, y);
            }
            if (this.props.map.select && tool === 'delete') {
                this.props.mapActions.deleteMapSource(x, y);
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            var _this2 = this;

            var cellSelected = false;
            this.props.map.selectedItem.map(function (item) {
                if (item.x === _this2.props.x && item.y === _this2.props.y) cellSelected = true;
            });
            return this.props.serialNumber !== nextProps.serialNumber || cellSelected;
        }
    }, {
        key: 'onMoveStart',
        value: function onMoveStart() {
            var selectCells = this.props.mapActions.selectCells;

            selectCells(true);
        }
    }, {
        key: 'onUnmove',
        value: function onUnmove() {
            if (this.props.map.select) {
                var selectCells = this.props.mapActions.selectCells;

                selectCells(false);
            }
        }
    }, {
        key: 'onRightClick',
        value: function onRightClick(e) {
            e.preventDefault();
            if (this.props.tools.currentItem === 'select') {
                this.props.mapActions.resetSelections();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var num = this.props.serialNumber;
            var className = 'cell ';

            className += this.props.map.mapping[num] ? this.props.map.mapping[num] : '';
            this.props.map.selectedItem.map(function (item) {
                if (item.x === _this3.props.x && item.y === _this3.props.y) className += 'selected';
            });
            return _react2.default.createElement('div', {
                className: className,
                onClick: this.onClick,
                onMouseDown: this.onMoveStart,
                onMouseMove: this.onMove,
                onMouseUp: this.onUnmove,
                onContextMenu: this.onRightClick
            });
        }
    }]);

    return Cell;
}(_react.Component);

exports.default = Cell;

/* REACT HOT LOADER */ }).call(this); } finally { if (module.hot) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("C:\\Users\\Dmitriy\\WebstormProjects\\FirstProject\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Cell.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }