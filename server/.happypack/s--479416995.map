{"version":3,"sources":["C:/Users/Dmitriy/WebstormProjects/FirstProject/server/..\\client\\containers\\Blocks\\Blocks.js"],"names":["blocksActions","toolsActions","LeftNavButton","props","onClick","RightNavButton","Blocks","initBlocks","arrayBlocks","mapping","map","key","num","setSelectedBlock","newArray","source","selectedItem","item","x","y","e","window","event","setState","eventType","type","deltaY","slider","slickNext","slickPrev","settings","draggable","initialSlide","infinite","speed","slidesToShow","slidesToScroll","className","prevArrow","nextArrow","variableWidth","sliderContent","blocks","temp","selectedBlock","push","selectBlockHandle","bind","length","wheelHandle","c","mapStateToProps","state","blocksReducer","mapReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Slider from 'react-slick';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as blocksActions from '../../actions/blocksActions';\r\nimport * as toolsActions from '../../actions/toolsActions';\r\n\r\nclass LeftNavButton extends Component {\r\n    render() {\r\n        return <div onClick={this.props.onClick} className=\"prevArrow\">\r\n            <div/>\r\n        </div>\r\n    }\r\n}\r\nclass RightNavButton extends Component {\r\n    render() {\r\n        return <div onClick={this.props.onClick} className=\"nextArrow\">\r\n            <div src=\"/img/nextArrow.png\"/>\r\n        </div>\r\n    }\r\n}\r\n\r\nclass Blocks extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        const {initBlocks} = this.props.blocksActions;\r\n        let arrayBlocks = {};\r\n        let {...mapping} = this.props.map.mapping;\r\n        for (let key in mapping) {\r\n            arrayBlocks[key] = mapping[key];\r\n        }\r\n        initBlocks(arrayBlocks);\r\n    }\r\n\r\n    selectBlockHandle(num) {\r\n\r\n        this.props.blocksActions.setSelectedBlock(num);\r\n\r\n        let newArray = this.props.map.source;\r\n\r\n        this.props.map.selectedItem.map((item) => {\r\n            newArray[item.x][item.y] = num;\r\n        });\r\n    }\r\n\r\n    wheelHandle(e = window.event) {\r\n        this.setState({eventType: e.type});\r\n        if (e.deltaY > 0)\r\n            this.slider.slickNext();\r\n        else\r\n            this.slider.slickPrev();\r\n    }\r\n\r\n    render() {\r\n        let settings = {\r\n            draggable: false,\r\n            initialSlide: 0,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 8,\r\n            slidesToScroll: 3,\r\n            className: 'blocksCarousel',\r\n            prevArrow: <LeftNavButton/>,\r\n            nextArrow: <RightNavButton/>,\r\n            variableWidth: true,\r\n        };\r\n        let sliderContent = [];\r\n        let {...blocks} = this.props.blocks;\r\n        let {...mapping} = this.props.map.mapping;\r\n        for (let item in blocks) {\r\n            let temp = mapping[item];\r\n            if (this.props.blocks.selectedBlock === item)\r\n                temp += ' selected';\r\n            temp += ' block';\r\n            sliderContent.push(\r\n                <div\r\n                    className={temp}\r\n                    key={item}\r\n                    onClick={this.selectBlockHandle.bind(this, item)}\r\n                />);\r\n        }\r\n\r\n\r\n        if (!sliderContent.length) {\r\n            sliderContent = (<div className=\"block\">Loading...</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"blocksContainer\">\r\n                <div className=\"blocks\"\r\n                     onWheel={this.wheelHandle.bind(this, event)}\r\n                >\r\n                    <Slider ref={c => this.slider = c } {...settings}>\r\n                        {sliderContent}\r\n                    </Slider>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        blocks: state.blocksReducer,\r\n        map: state.mapReducer,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        blocksActions: bindActionCreators(blocksActions, dispatch),\r\n        toolsActions: bindActionCreators(toolsActions, dispatch),\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Blocks);"]}