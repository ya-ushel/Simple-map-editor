{"version":3,"sources":["C:/Users/Dmitriy/WebstormProjects/FirstProject/server/..\\client\\containers\\Map\\Map.js"],"names":["mapActions","Map","props","clientWidth","document","documentElement","clientHeight","initMapping","state","countColumn","Math","floor","countRows","gridArray","test","window","addEventListener","forceUpdate","setState","createGridArray","nextProps","map","source","rows","column","array","i","j","initMap","width","height","console","log","updateMapSize","changedMapSource","clickHandle","bind","mapStateToProps","mapReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as mapActions from '../../actions/mapAction';\r\nimport React, {Component} from 'react';\r\nimport Grid from './parts/Grid';\r\n\r\n\r\nclass Map extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let clientWidth = document.documentElement.clientWidth;\r\n        let clientHeight = document.documentElement.clientHeight;\r\n\r\n        const { initMapping } = props.mapActions;\r\n        initMapping({\r\n            0: 'cakeHalf',\r\n            1: 'cake'\r\n        });\r\n\r\n        this.state = {\r\n            countColumn: Math.floor(clientWidth / 50),\r\n            countRows: Math.floor(clientHeight / 50),\r\n            gridArray: [],\r\n            test: false,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('resize', () => this.forceUpdate())\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n        this.setState({\r\n            gridArray: this.createGridArray(),\r\n            test: true\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps){\r\n        this.setState({\r\n            gridArray: nextProps.map.source,\r\n        });\r\n        return true;\r\n    }\r\n\r\n    createGridArray(rows = this.state.countRows, column = this.state.countColumn){\r\n        let array = [];\r\n        for(let i = 0;i < rows;i++){\r\n            array[i] = [];\r\n            for(let j = 0;j < column;j++){\r\n                array[i][j] = i;\r\n            }\r\n        }\r\n        const { initMap } = this.props.mapActions;\r\n        initMap(array, this.state.countColumn, this.state.countRows);\r\n        return array;\r\n    }\r\n\r\n\r\n    clickHandle(){\r\n        // console.log(this.props.map, 'MAP HANDLECLICK');\r\n    }\r\n\r\n    forceUpdate(){\r\n\r\n        const width = Math.floor(document.documentElement.clientWidth / 50);\r\n        const height = Math.floor(document.documentElement.clientHeight / 50);\r\n\r\n        if( width !== this.state.countColumn || height !== this.state.countRows){\r\n            this.setState({\r\n                countColumn: width,\r\n                countRows: height,\r\n            });\r\n\r\n            console.log('THIS STATE WIDTH', this.state.countColumn);\r\n            const { updateMapSize } = this.props.mapActions;\r\n            updateMapSize(width,height);\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const map = this.props.map;\r\n        const { changedMapSource} = this.props.mapActions;\r\n        console.log('RENDER MAP',map);\r\n        return(\r\n            <div className=\"map\" onClick={this.clickHandle.bind(this)} >\r\n                <Grid map={map} mapActions = {changedMapSource}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        map: state.mapReducer,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return{\r\n        mapActions: bindActionCreators(mapActions, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);"]}