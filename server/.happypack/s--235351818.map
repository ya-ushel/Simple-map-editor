{"version":3,"sources":["C:/Users/Dmitriy/WebstormProjects/FirstProject/server/..\\client\\containers\\Map\\Map.js"],"names":["mapActions","Map","props","clientWidth","document","documentElement","clientHeight","initMapping","blocks","angle","state","countColumn","Math","ceil","countRows","gridArray","test","window","addEventListener","forceUpdate","setState","createGridArray","nextProps","map","source","rows","column","array","i","j","initMap","width","floor","height","console","log","updateMapSize","tools","mapStateToProps","mapReducer","toolsReducer","blocksReducer","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;IAAYA,U;;AACZ;;;;AACA;;;;;;;;;;;;;;IAIMC,G;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA,8GACRA,KADQ;;AAGd,YAAIC,cAAcC,SAASC,eAAT,CAAyBF,WAA3C;AACA,YAAIG,eAAeF,SAASC,eAAT,CAAyBC,YAA5C;;AAJc,YAMNC,WANM,GAMUL,MAAMF,UANhB,CAMNO,WANM;;AAOdA,oBAAY;AACRC,oBAAO;AACH,qBAAK,UADF;AAEH,sBAAM,WAFH;AAGH,sBAAM;AAHH,aADC;AAoBRC,mBAAM,CACF,CADE,EACA,CADA,EACE,CADF;AApBE,SAAZ;;AAyBA,cAAKC,KAAL,GAAa;AACTC,yBAAaC,KAAKC,IAAL,CAAUV,cAAc,EAAxB,CADJ;AAETW,uBAAWF,KAAKC,IAAL,CAAUP,eAAe,EAAzB,CAFF;AAGTS,uBAAW,EAHF;AAITC,kBAAM;;AAJG,SAAb;AAhCc;AAuCjB;;;;4CAEkB;AAAA;;AACfC,mBAAOC,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,uBAAM,OAAKC,WAAL,EAAN;AAAA,aAAlC;AACH;;;6CAEmB;;AAEhB,iBAAKC,QAAL,CAAc;AACVL,2BAAW,KAAKM,eAAL,EADD;AAEVL,sBAAM;AAFI,aAAd;AAIH;;;8CAEqBM,S,EAAU;AAC5B,iBAAKF,QAAL,CAAc;AACVL,2BAAWO,UAAUC,GAAV,CAAcC;AADf,aAAd;AAGA,mBAAO,IAAP;AACH;;;0CAE4E;AAAA,gBAA7DC,IAA6D,uEAAtD,KAAKf,KAAL,CAAWI,SAA2C;AAAA,gBAAhCY,MAAgC,uEAAvB,KAAKhB,KAAL,CAAWC,WAAY;;AACzE,gBAAIgB,QAAQ,EAAZ;AACA,iBAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAIH,IAAlB,EAAuBG,GAAvB,EAA2B;AACvBD,sBAAMC,CAAN,IAAW,EAAX;AACA,qBAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAIH,MAAlB,EAAyBG,GAAzB,EAA6B,CAE5B;AACJ;AAPwE,gBAQjEC,OARiE,GAQrD,KAAK5B,KAAL,CAAWF,UAR0C,CAQjE8B,OARiE;;AASzEA,oBAAQH,KAAR,EAAe,KAAKjB,KAAL,CAAWC,WAA1B,EAAuC,KAAKD,KAAL,CAAWI,SAAlD;AACA,mBAAOa,KAAP;AACH;;;sCAIY;;AAET,gBAAMI,QAAQnB,KAAKoB,KAAL,CAAW5B,SAASC,eAAT,CAAyBF,WAAzB,GAAuC,EAAlD,CAAd;AACA,gBAAM8B,SAASrB,KAAKoB,KAAL,CAAW5B,SAASC,eAAT,CAAyBC,YAAzB,GAAwC,EAAnD,CAAf;;AAEA,gBAAIyB,UAAU,KAAKrB,KAAL,CAAWC,WAArB,IAAoCsB,WAAW,KAAKvB,KAAL,CAAWI,SAA9D,EAAwE;AACpE,qBAAKM,QAAL,CAAc;AACVT,iCAAaoB,KADH;AAEVjB,+BAAWmB;AAFD,iBAAd;;AAKAC,wBAAQC,GAAR,CAAY,kBAAZ,EAAgC,KAAKzB,KAAL,CAAWC,WAA3C;AANoE,oBAO5DyB,aAP4D,GAO1C,KAAKlC,KAAL,CAAWF,UAP+B,CAO5DoC,aAP4D;;AAQpEA,8BAAcL,KAAd,EAAoBE,MAApB;AACH;AACJ;;;iCAEO;AACJ,gBAAMV,MAAM,KAAKrB,KAAL,CAAWqB,GAAvB;AACA;AACA,mBACI;AAAA;AAAA,kBAAK,WAAU,KAAf;AACI;AACI,yBAAKA,GADT;AAEI,gCAAc,KAAKrB,KAAL,CAAWF,UAF7B;AAGI,2BAAS,KAAKE,KAAL,CAAWmC,KAHxB;AAII,4BAAU,KAAKnC,KAAL,CAAWM;AAJzB;AADJ,aADJ;AAUH;;;;;;AAGL,SAAS8B,eAAT,CAA0B5B,KAA1B,EAAiC;AAC7B,WAAO;AACHa,aAAKb,MAAM6B,UADR;AAEHF,eAAO3B,MAAM8B,YAFV;AAGHhC,gBAAQE,MAAM+B;AAHX,KAAP;AAKH;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,WAAM;AACF3C,oBAAY,+BAAmBA,UAAnB,EAA+B2C,QAA/B;AADV,KAAN;AAGH;;kBAGc,yBAAQL,eAAR,EAAyBI,kBAAzB,EAA6CzC,GAA7C,C","sourcesContent":["import {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as mapActions from '../../actions/mapActions';\r\nimport React, {Component} from 'react';\r\nimport Grid from './parts/Grid';\r\n\r\n\r\n\r\nclass Map extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let clientWidth = document.documentElement.clientWidth;\r\n        let clientHeight = document.documentElement.clientHeight;\r\n\r\n        const { initMapping } = props.mapActions;\r\n        initMapping({\r\n            blocks:{\r\n                '1': 'grass1_1',\r\n                '10': 'grass2_1 ',\r\n                '11': 'grass2_2 ',\r\n                // 3: ['grass03_01 '],\r\n                // 4: ['grass04_01 '],\r\n                // 5: ['grass05_01 ', 'grass05_02 '],\r\n                // 6: ['grass06_01 ','grass06_02 ', 'grass06_03 ', 'grass06_04 '],\r\n                // 7: ['grass07_01 '],\r\n                // 8: ['grass08_01 ', 'grass08_02 '],\r\n                // 9: ['grass09_01 ', 'grass09_02 '],\r\n                // 10:['grass10_01 ', 'grass10_02 '],\r\n                // 11: ['grass11_01 '],\r\n                // 12: ['grass12_01 ','grass12_02 ', 'grass12_03 ', 'grass12_04 '],\r\n                // 13: ['grass13_01 ','grass13_02 ', 'grass13_03 ', 'grass13_04 '],\r\n                // 14: ['grass14_01 ','grass14_02 ', 'grass14_03 ', 'grass14_04 '],\r\n                // 15: ['grass15_01 '],\r\n                // 16: ['grass16_01 '],\r\n            },\r\n            angle:[\r\n                0,0,0,\r\n            ],\r\n        });\r\n\r\n        this.state = {\r\n            countColumn: Math.ceil(clientWidth / 50),\r\n            countRows: Math.ceil(clientHeight / 50),\r\n            gridArray: [],\r\n            test: false,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('resize', () => this.forceUpdate())\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n        this.setState({\r\n            gridArray: this.createGridArray(),\r\n            test: true\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps){\r\n        this.setState({\r\n            gridArray: nextProps.map.source,\r\n        });\r\n        return true;\r\n    }\r\n\r\n    createGridArray(rows = this.state.countRows, column = this.state.countColumn){\r\n        let array = [];\r\n        for(let i = 0;i < rows;i++){\r\n            array[i] = [];\r\n            for(let j = 0;j < column;j++){\r\n\r\n            }\r\n        }\r\n        const { initMap } = this.props.mapActions;\r\n        initMap(array, this.state.countColumn, this.state.countRows);\r\n        return array;\r\n    }\r\n\r\n\r\n\r\n    forceUpdate(){\r\n\r\n        const width = Math.floor(document.documentElement.clientWidth / 50);\r\n        const height = Math.floor(document.documentElement.clientHeight / 50);\r\n\r\n        if( width !== this.state.countColumn || height !== this.state.countRows){\r\n            this.setState({\r\n                countColumn: width,\r\n                countRows: height,\r\n            });\r\n\r\n            console.log('THIS STATE WIDTH', this.state.countColumn);\r\n            const { updateMapSize } = this.props.mapActions;\r\n            updateMapSize(width,height);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const map = this.props.map;\r\n        // console.log('RENDER MAP',map);\r\n        return(\r\n            <div className=\"map\"  >\r\n                <Grid\r\n                    map={map}\r\n                    mapActions = {this.props.mapActions}\r\n                    tools = {this.props.tools}\r\n                    blocks = {this.props.blocks}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        map: state.mapReducer,\r\n        tools: state.toolsReducer,\r\n        blocks: state.blocksReducer,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return{\r\n        mapActions: bindActionCreators(mapActions, dispatch)\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);"]}